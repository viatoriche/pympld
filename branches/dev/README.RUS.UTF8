                    Доброго времени суток!

    Перед вами проект Python MPlayerd (pympld/mplayerd etc).
Пока еще это развивающийся и молодой проект, его цель - 
создать мультимедиа-службу (daemon), которая должна взять на 
себя всю работу с аудио/видео контентом в Операционной Системе.

    За основу взята очень мощная мультимедиа система - MPlayer.
Мплеер позволяет запускать себя в режиме slave (командный режим, 
в котором мплеер управляется не через горячие клавиши а посылкой 
специальных команд, например loadfile /path/to/file откроет этот
файл на проигрывание). Технология пайпов позволяет связать stdin
мплеера с чем угодно. Командный режим мплеера предоставляет гибкую
функциональность управления, позволяет делать с собой такие вещи,
которые не реализованы даже во многих GUI-фронтендах (KMPlayer, 
SMPlayer, GNOME-MPlaye etc), которые, кстати говоря, тоже активно
используют slave-mode мплеера. 
    Python MPlayerd это оболочка над mplayer, которая является чуть 
более высоким уровнем абстракции над командным режимом. Это работает 
так: поступающие команды сначала проходят через внутренний обработчик 
pympld и только потом (если нужно) транслируются в mplayer, то есть 
пользователь практически сохраняет за собой возможность использовать 
всю огромнейшую функциональность командного режима mplayer и в довесок 
получает функциональность самого pympld точно также на уровне команд.
PyMPlayerd расширяет возможности мплеера добавляя удобное управление
плейлистами, даемонизацию, возможность простого управления через
пайпы/фифо-файлы, писать свои собственные скрипты на любом ЯП и
интегрировать их в общую систему на уровне пайпов.
    Все это делает делает Python MPlayerd универсальной,
встраиваемой и независимой мультимедиа службой, дающей возможность
автоматизации процессов прослушивания музыки, просмотра фильмов/аниме.
Это и ведение истории прослушиваний/просмотра файлов, и скробблинг 
на разные ресурсы, на подобие http://www.last.fm/ , постинг
текущих композиций в статусбары, статусы в IM etc.
                    Можно грабить корованы.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Где взять?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Сейчас единственным местом откуда можно забрать паймплеер, это гитхаб

    http://github.com/viatoriche/pympld/

На данный момент там присутствует две ветки:
    1:  http://github.com/viatoriche/pympld/tree/master/trunk/
    2:  http://github.com/viatoriche/pympld/tree/master/svn_clone/mplayerd/

    trunk - ветка с рабочей копией, тут находится копия mplayer, которая
как минимум, запускается и реализуют основную функциональность без глюков.
Я пишу программу в свободное время и не очень активно, поэтому в транк
закидываю копию тогда, когда она у меня дома проработала без нареканий как
минимум неделю. Дальше я снова берусь за более менее активную разработку
дополняя функциональность, расширяя возможности и реализую задуманные фичи
и баги. И все свои наработки я сливаю в ветку svn_clone/mplayerd, в этой
ветке всегда самый свежий код, какой только возможен.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Как установить?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Пока что никаких пакетов для разных дистрибутивов нет и врятли будут
в ближайшем будущем.
    Поэтому предлагается такой временный метод:

    1. Выбираете ветку с github, которую вы хотите использовать
    2. Делаете ее клон у себя на машине:
        $ cd ~/src
        trunk: git clone 


_______________________________
STEP1: Installing Binary Codecs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unpack the codecs archives and put the contents in a directory where MPlayer
will find them. The default directory is /usr/local/lib/codecs/ (it used to be
/usr/local/lib/win32 in the past, this also works) but you can change that to
something else by passing the '--codecsdir' option to './configure'.


__________________________
STEP2: Configuring MPlayer
~~~~~~~~~~~~~~~~~~~~~~~~~~

MPlayer can be adapted to all kinds of needs and hardware environments. Run

  ./configure

to configure MPlayer with the default options. GUI support has to be enabled
separately, run

  ./configure --enable-gui

if you want to use the GUI.

If something does not work as expected, try

  ./configure --help

to see the available options and select what you need.

The configure script prints a summary of enabled and disabled options. If you
have something installed that configure fails to detect, check the file
configure.log for errors and reasons for the failure. Repeat this step until
you are satisfied with the enabled feature set.


________________________
STEP3: Compiling MPlayer
~~~~~~~~~~~~~~~~~~~~~~~~

Now you can start the compilation by typing

  make

You can install MPlayer with

  make install

provided that you have write permission in the installation directory.

If all went well, you can run MPlayer by typing 'mplayer'. A help screen with a
summary of the most common options and keyboard shortcuts should be displayed.

If you get 'unable to load shared library' or similar errors, run
'ldd ./mplayer' to check which libraries fail and go back to STEP 3 to fix it.
Sometimes running 'ldconfig' is enough to fix the problem.

NOTE: If you run Debian you can configure, compile and build a proper Debian
.deb package with only one command:

  fakeroot debian/rules binary

If you want to pass custom options to configure, you can set up the
DEB_BUILD_OPTIONS environment variable. For instance, if you want GUI
and OSD menu support you would use:

  DEB_BUILD_OPTIONS="--enable-gui --enable-menu" fakeroot debian/rules binary

You can also pass some variables to the Makefile. For example, if you want
to compile with gcc 3.4 even if it's not the default compiler:

  CC=gcc-3.4 DEB_BUILD_OPTIONS="--enable-gui" fakeroot debian/rules binary

To clean up the source tree run the following command:

  fakeroot debian/rules clean

______________________________________
STEP4: Choose an onscreen display font
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use any TrueType font installed on your system. Just pass '-font
/path/to/font.ttf' on the command line or add 'font=/path/to/font.ttf' to
your configuration file. The manual page has more details. Alternatively
you can create a symbolic link from either ~/.mplayer/subfont.ttf or
/usr/local/share/mplayer/subfont.ttf to your TrueType font.


____________________________
STEP5: Installing a GUI skin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unpack the archive and put the contents in /usr/local/share/mplayer/skins/ or
~/.mplayer/skins/. MPlayer will use the skin in the subdirectory named default
of /usr/local/share/mplayer/skins/ or ~/.mplayer/skins/ unless told otherwise
via the '-skin' switch. You should therefore rename your skin subdirectory or
make a suitable symbolic link.


__________________
STEP6: Let's play!
~~~~~~~~~~~~~~~~~~

That's it for the moment. To start playing movies, open a command line and try

  mplayer <moviefile>

or for the GUI

  gmplayer <moviefile>

gmplayer is a symbolic link to mplayer created by 'make install'.
Without <moviefile>, gmplayer will start with the GUI filepicker.

To play a VCD track or a DVD title, try:

  mplayer vcd://2 -cdrom-device /dev/hdc
  mplayer dvd://1 -alang en -slang hu -dvd-device /dev/hdd

See 'mplayer -help' and 'man mplayer' for further options.

'mplayer -vo help' will show you the available video output drivers. Experiment
with the '-vo' switch to see which one gives you the best performance.
If you get jerky playback or no sound, experiment with the '-ao' switch (see
'-ao help') to choose between different audio drivers. Note that jerky playback
is caused by buggy audio drivers or a slow processor and video card. With a
good audio and video driver combination, one can play DVDs and 720x576 MPEG-4
files smoothly on a Celeron 366. Slower systems may need the '-framedrop'
option.

Questions you may have are probably answered in the rest of the documentation.
The places to start reading are the man page, DOCS/HTML/en/index.html and
DOCS/HTML/en/faq.html. If you find a bug, please report it, but first read
DOCS/HTML/en/bugreports.html.
